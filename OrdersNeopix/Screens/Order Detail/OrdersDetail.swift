//
//  OrdersDetail.swift
//  OrdersNeopix
//
//  Created by Uros Smiljanic on 21/02/2019.
//  Copyright Â© 2019 Uros Smiljanic. All rights reserved.
//

// Data model generated by https://app.quicktype.io/ for JSON data send from API call

import Foundation

struct OrdersDetail: Codable {
    let data: DataClass
}

struct DataClass: Codable {
    let id: Int
    let name, primaryContactName, primaryContactPhone, secondaryContactName: String
    let secondaryContactPhone, address: String
    let image: String
    let orderNumber: String
    let createdOn: Int
    let status: String
    let totalAmount: Int
    let notes: [Note]
    let products: [Product]
    
    enum CodingKeys: String, CodingKey {
        case id, name, primaryContactName, primaryContactPhone, secondaryContactName, secondaryContactPhone, address, image, orderNumber, createdOn, status
        case totalAmount = "totalAmount:"
        case notes, products
    }
}

struct Note: Codable {
    let message: String
    let date: Int
}

struct Product: Codable {
    let name: String
    let totalPrice, quantity: Int
    let image: String
}

// MARK: Convenience initializers and mutators

extension OrdersDetail {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(OrdersDetail.self, from: data)
    }
    
    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }
    
    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }
    
    func with(
        data: DataClass? = nil
        ) -> OrdersDetail {
        return OrdersDetail(
            data: data ?? self.data
        )
    }
    
    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }
    
    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

extension DataClass {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(DataClass.self, from: data)
    }
    
    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }
    
    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }
    
    func with(
        id: Int? = nil,
        name: String? = nil,
        primaryContactName: String? = nil,
        primaryContactPhone: String? = nil,
        secondaryContactName: String? = nil,
        secondaryContactPhone: String? = nil,
        address: String? = nil,
        image: String? = nil,
        orderNumber: String? = nil,
        createdOn: Int? = nil,
        status: String? = nil,
        totalAmount: Int? = nil,
        notes: [Note]? = nil,
        products: [Product]? = nil
        ) -> DataClass {
        return DataClass(
            id: id ?? self.id,
            name: name ?? self.name,
            primaryContactName: primaryContactName ?? self.primaryContactName,
            primaryContactPhone: primaryContactPhone ?? self.primaryContactPhone,
            secondaryContactName: secondaryContactName ?? self.secondaryContactName,
            secondaryContactPhone: secondaryContactPhone ?? self.secondaryContactPhone,
            address: address ?? self.address,
            image: image ?? self.image,
            orderNumber: orderNumber ?? self.orderNumber,
            createdOn: createdOn ?? self.createdOn,
            status: status ?? self.status,
            totalAmount: totalAmount ?? self.totalAmount,
            notes: notes ?? self.notes,
            products: products ?? self.products
        )
    }
    
    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }
    
    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

extension Note {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(Note.self, from: data)
    }
    
    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }
    
    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }
    
    func with(
        message: String? = nil,
        date: Int? = nil
        ) -> Note {
        return Note(
            message: message ?? self.message,
            date: date ?? self.date
        )
    }
    
    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }
    
    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

extension Product {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(Product.self, from: data)
    }
    
    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }
    
    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }
    
    func with(
        name: String? = nil,
        totalPrice: Int? = nil,
        quantity: Int? = nil,
        image: String? = nil
        ) -> Product {
        return Product(
            name: name ?? self.name,
            totalPrice: totalPrice ?? self.totalPrice,
            quantity: quantity ?? self.quantity,
            image: image ?? self.image
        )
    }
    
    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }
    
    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

fileprivate func newJSONDecoder() -> JSONDecoder {
    let decoder = JSONDecoder()
    if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
        decoder.dateDecodingStrategy = .iso8601
    }
    return decoder
}

fileprivate func newJSONEncoder() -> JSONEncoder {
    let encoder = JSONEncoder()
    if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
        encoder.dateEncodingStrategy = .iso8601
    }
    return encoder
}
